* What

This document lists the exercises proposed for the ASA lecture on
02/09/20, the morning session.


* Exercise 0 [Problem Reduction]

Problem reduction is a common term in computability theory. Simply
speaking, a problem A reduces to a problem B if solving B allows for a
solving A.


- Let f be a scalar function whose output is a real number. Suppose
  that we have a tool for finding the minimum of any function, can we
  use the same tool to find the maximum of "f"?

- Suppose that we have a local opitmization implementation that can
  precisely calculate a local minimum given a starting point, for any function 
  f(double x). Can I use the one to also get the global minimum of any
  function? (this exo has a trap)

- Suppose that we have a solver that determines satisfiability for all
  floating-point constraints involving <=, ==, logic AND, and logic
  OR. Can we use the same solver to solve an arbitrary floating-point
  constraint "<", "!=", and ">" ?


* Exercise 1 [Principles for constructing a weak-distance]

In the previous lecture, we explained how we would construct a
nonnegative program R (called weak distance in today's lecture)
corresponding to a conjunctive normal form (CNF), such that R's roots
are the models of the constraint.  In particular, for an CNF in the
form of c_1 AND c_2, we can construct R as R_1 + R_2 where each R_i
corresponds to c_i.

As explained in today's lecture, there is not a standard weak
distance. An alternative way to construct R is R(x) = max (R1(x),
R2(x)), where "max" takes two inputs and returns the larger
number. Please justify this way of constructing R.

* Exercise 2 [An implicit condition for constructing the weak distance]

Consider the constraint x * x = 4, and the two following weak
distances for the constraint:

- R_try1 is abs (x * x - 4)

- R_try2 is 0 if x * x == 4 or 1 otherwise.

Try to solve the constraints, using scipy.optimize.basinhopping with
R_try1 and R_try2.

* Exercise 3 [Path reachability]
Try to solve the path reachability problem illustrated in our lecture by constructing a weak distance. You can fill in "put your implementation here" in the python code below and then run it.


#+BEGIN_SRC
import numpy as np
import scipy.optimize as op

def mcmc(func, start_point=0, niter=10,method='powell'):
    tol=1e-10
    def callback_global(x,f,accepted):
        conclusion= 'good!' if f<tol else "not good enough"
        print("MCMC Sampling:: At x=%.10f,  f=%g,  ==> %s" % (x,f,  conclusion))
    op.basinhopping(func,start_point,callback=callback_global,minimizer_kwargs={'method':method},niter=niter,stepsize=20)

def square(x): return x*x

def FOO(x):
    if x <= 1.0:
        x = x + 1

    y = square(x)
    if y == 4.0:
        x = x - 1

def weak_distance(x):
    # put your implementation here
    return 0

if __name__=="__main__":

    mcmc(weak_distance)
#+END_SRC





* Exercise 4 [Sanitizer]
This exercise aims to illustrate a simple and practical tool that you
may use directly in testing (which relates more to our previous
lectures).

Consider the following C program

#+BEGIN_SRC
#include <stdio.h>
int main(){
  int a[3]={0,1,2};
  for (int i=0; i<=3; i++)
    printf("value of a[%d] is %d\n",i, a[i]);
}

#+END_SRC

- What would be the output of this program? Will the code fail, or not? Try it.
- If you are to develop a tool for detecting this kind of bug, how would you do it? This is an open question. Consider first, for example, whether you would like use static or run-time analysis.
- Follow the instructions from
  https://github.com/zhoulaifu/hello_sanitizer to detect this bug
  automatically. Briefly speaking, you are to compile the  program with a compiler option known as the address sanitizer; then you can detect the bug via running it.
* Exercise 5 [Construct a weak-distance for detecting overflow]
Computing the average of two numbers x and y directly with (x+y)/2 can
have a floating-point overflow (which could be then exploited). Try to
reproduce such an overflow with a weak-distance.

You are to implement the function "wd" below. Running the code below,
with a well-defined "wd" function, should help you find a pair of
floating-point numbers such as (9e+307, 9e+307), noting that the
largest floating-point number is about 1.79e+308 (which can be
produced by "sys.float_info.max" in python's sys module).


#+BEGIN_SRC
def average(X):
     x=X[0]
     y=X[1]
     ret = (x+y)/2.0
     return wd(ret)

if __name__=="__main__":

     print (op.basinhopping(average,[1,1], niter=100,stepsize=1e2, minimizer_kwargs={'method':'nelder-mead'}))
#+END_SRC
